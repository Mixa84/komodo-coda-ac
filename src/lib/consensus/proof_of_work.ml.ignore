open Core_kernel
open Coda_base
open Coda_base.Util
open Snark_bits
open Snark_params

module Pow_hash = struct
  Data_hash.Make_small (struct
    let length_in_bits = Target.bit_length
  end)

  let meets_target_unchecked (pow: t) (target: Target.t) =
    Bigint.(compare (of_field (pow :> Field.t)) (of_field (target :> Field.t)))
    < 0

  let meets_target_var (pow: var) (target: Target.Packed.var) =
    let open Let_syntax in
    let%map {less; _} =
      Field.Checked.compare ~bit_length:length_in_bits (var_to_hash_packed pow)
        (target :> Field.Checked.t)
    in
    less
end

module Strength = struct
  module Stable = struct
    module V1 = struct
      type t = Tick.Field.t [@@deriving bin_io, sexp, eq]
    end
  end

  include Stable.V1

  let zero = Tick.Field.zero

  let bit_length = Target.bit_length + 1

  let () = assert (bit_length < Tick.Field.size_in_bits)

  let max =
    Bignum_bigint.(pow (of_int 2) (of_int bit_length) - one)
    |> Tick.Bigint.of_bignum_bigint |> Tick.Bigint.to_field

  let of_field x =
    assert (Tick.Field.compare x max <= 0) ;
    x

  let field_var_to_unpacked (x: Tick.Field.Checked.t) =
    Tick.Field.Checked.unpack ~length:bit_length x

  include Bits.Snarkable.Small (Tick)
            (struct
              let bit_length = bit_length
            end)

  module Bits =
    Bits.Make_field0 (Tick.Field) (Tick.Bigint)
      (struct
        let bit_length = bit_length
      end)

  let packed_to_number t =
    let open Tick.Let_syntax in
    let%map unpacked = unpack_var t in
    Tick.Number.of_bits (Unpacked.var_to_bits unpacked)

  let packed_of_number num =
    let open Tick.Let_syntax in
    let%map unpacked = field_var_to_unpacked (Tick.Number.to_var num) in
    pack_var unpacked

  let compare x y = Tick.Bigint.(compare (of_field x) (of_field y))

  (* TODO: Urgent, this differs from part of the checked function. *)
  let of_target_unchecked : Target.t -> t =
    let module Bigint = Tick_curve.Bigint.R in
    let max_bigint = Bigint.of_field (Target.max :> Tick.Field.t) in
    fun target ->
      Bigint.div max_bigint (Bigint.of_field (target :> Tick.Field.t))
      |> Bigint.to_field

  type _ Snarky.Request.t +=
    | Floor_divide:
        [`Two_to_the of int] * Tick.Field.t
        -> Tick.Field.t Snarky.Request.t

  let two_to_the i =
    two_to_the i |> Tick.Bigint.of_bignum_bigint |> Tick.Bigint.to_field

  let floor_divide ~numerator:(`Two_to_the (b: int) as numerator) y y_unpacked =
    let open Tick.Let_syntax in
    assert (b <= Tick.Field.size_in_bits - 2) ;
    assert (List.length y_unpacked <= b) ;
    let%bind z =
      Tick.exists Tick.Typ.field
        ~request:
          Tick.As_prover.(
            map (read_var y) ~f:(fun y -> Floor_divide (numerator, y)))
        ~compute:
          Tick.As_prover.(
            map (read_var y) ~f:(fun y ->
                Tick.Bigint.to_field
                  (Tick_curve.Bigint.R.div
                     (Tick.Bigint.of_field (two_to_the b))
                     (Tick.Bigint.of_field y)) ))
    in
    (* This block checks that z * y does not overflow. *)
    let%bind () =
      (* The total number of bits in z and y must be less than the field size in bits essentially
         to prevent overflow. *)
      let%bind k = Tick.Util.num_bits_upper_bound_unpacked y_unpacked in
      (* We have to check that k <= b.
         The call to [num_bits_upper_bound_unpacked] actually guarantees that k
         is <= [List.length z_unpacked = b], since it asserts that [k] is
         equal to a sum of [b] booleans, but we add an explicit check here since it
         is relatively cheap and the internals of that function might change. *)
      let%bind () =
        Tick.Field.Checked.Assert.lte ~bit_length:(Tick.Util.num_bits_int b) k
          (Tick.Field.Checked.constant (Tick.Field.of_int b))
      in
      let m =
        Tick.Field.Checked.(sub (constant (Tick.Field.of_int (b + 1))) k)
      in
      let%bind z_unpacked = Tick.Field.Checked.unpack z ~length:b in
      Tick.Util.assert_num_bits_upper_bound z_unpacked m
    in
    let%bind zy = Tick.Field.Checked.mul z y in
    let numerator = Tick.Field.Checked.constant (two_to_the b) in
    let%map () = Tick.Field.Checked.Assert.lte ~bit_length:(b + 1) zy numerator
    and () =
      Tick.Field.Checked.Assert.lt ~bit_length:(b + 1) numerator
        Tick.Field.Checked.Infix.(zy + y)
    in
    z

  (* floor(two_to_the bit_length / y) *)
  let of_target (y: Target.Packed.var) (y_unpacked: Target.Unpacked.var) =
    Tick.with_label __LOC__
      ( if Insecure.strength_calculation then
          Tick.provide_witness Tick.Typ.field
            Tick.As_prover.(
              map (read Target.Packed.typ y) ~f:of_target_unchecked)
      else
        floor_divide ~numerator:(`Two_to_the bit_length)
          (y :> Tick.Field.var)
          (Target.Unpacked.var_to_bits y_unpacked) )

  let ( < ) x y = compare x y < 0

  let ( > ) x y = compare x y > 0

  let ( = ) x y = compare x y = 0

  let ( >= ) x y = not (x < y)

  let ( <= ) x y = not (x > y)

  let increase (t: t) ~(by: Target.t) : t =
    let incr = of_target_unchecked by in
    of_field (Tick.Field.add t incr)

  let increase_checked t ~by:(target_packed, target_unpacked) =
    let open Tick.Let_syntax in
    let%map incr = of_target target_packed target_unpacked in
    Tick.Field.Checked.Infix.(t + incr)
end

module Difficulty = struct
  type t = Target.t [@@deriving sexp, bin_io, compare, eq]

  type var = Target.Unpacked.var

  let typ = Target.Unpacked.typ

  let bound_divisor = `Two_to_the 11

  let delta_minus_one_max_bits = 7

  (** 8.192 seconds *)
  let target_time_ms = `Two_to_the 13

  let compute_target timestamp (previous_target: Target.t) time =
    let target_time_ms =
      let (`Two_to_the k) = target_time_ms in
      Bignum_bigint.(pow (of_int 2) (of_int k))
    in
    let target_max = Target.(to_bigint max) in
    let delta_minus_one_max =
      Bignum_bigint.(pow (of_int 2) (of_int delta_minus_one_max_bits) - one)
    in
    let div_pow_2 x (`Two_to_the k) = Bignum_bigint.shift_right x k in
    let previous_target = Target.to_bigint previous_target in
    assert (time > timestamp) ;
    let rate_multiplier =
      div_pow_2 Bignum_bigint.(target_max - previous_target) bound_divisor
    in
    let delta =
      let open Bignum_bigint in
      of_int64 Block_time.(Span.to_ms (diff time timestamp)) / target_time_ms
    in
    let open Bignum_bigint in
    Target.of_bigint
      ( if delta = zero then
          if previous_target < rate_multiplier then one
          else previous_target - rate_multiplier
      else
        let gamma = min (delta - one) delta_minus_one_max in
        previous_target + (rate_multiplier * gamma) )

  let meets_target_unchecked (pow_hash: Pow_hash.t) (target: Target.t) =
    Tick.Bigint.(
      compare
        (of_field (pow_hash :> Tick.Field.t))
        (of_field (target :> Tick.Field.t)))
    < 0

  let next t ~last ~this = compute_target last t this

  let meets t h = meets_target_unchecked h t
end

module Block_data = struct
  type value = unit [@@deriving bin_io, sexp]

  type var = unit

  let typ = Tick.Typ.unit

  let negative_one _ = ()
end

module State = struct
  (* Someday: It may well be worth using bitcoin's compact nbits for target values since
    targets are quite chunky *)
  type ('difficulty, 'strength) t_ =
    {next_difficulty: 'difficulty; strength: 'strength}
  [@@deriving bin_io, sexp]

  type value = (Difficulty.t, Strength.t) t_ [@@deriving bin_io, sexp]

  type var = (Difficulty.var, Strength.Unpacked.var) t_

  let negative_one =
    let next_difficulty : Target.Unpacked.value =
      if Insecure.initial_difficulty then Target.max
      else
        Target.of_bigint
          Bignum_bigint.(Target.(to_bigint max) / pow (of_int 2) (of_int 4))
    in
    {next_difficulty; strength= Strength.zero}

  let to_hlist {next_difficulty; strength} = H_list.[next_difficulty; strength]
  let of_hlist : (unit, 'difficulty -> 'strength -> unit) H_list.t -> ('difficulty, 'strength) t_ =
    fun H_list.[next_difficulty; strength] -> {next_difficulty; strength}

  let data_spec =
    Tick.Data_spec.[Difficulty.typ; Strength.Unpacked.typ]

  let typ =
    Tick.Typ.of_hlistable data_spec
      ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist
      ~value_to_hlist:to_hlist ~value_of_hlist:of_hlist
end

module Block = Block.Make (Block_data)

let create_hash state nonce =
  of_hash
    (Pedersen.digest_fold Hash_prefix.proof_of_work
       (Blockchain_state.fold state +> Block.Nonce.Bits.fold nonce))

let update_unchecked _state _block = failwith "TODO"
(*
  let next_difficulty = Difficulty.compute_target blockchain_state.timestamp state.next_difficulty block.time in
  let strength = Strength.increase state.strength ~by:state.next_difficulty in
  {next_difficulty; strength}
   *)

let verify _ _ = Tick.Let_syntax.return Tick.Boolean.true_

let update _state = failwith "TODO"
(*
  let open Tick.Let_syntax in
  let difficulty = previous_state.next_difficulty in
  let difficulty_packed = Target.pack_var difficulty in
  let time = block.state_transition_data.time in
  let%bind next_difficulty = compute_target state.timestamp difficulty time in
  let%map strength =
    Strength.increase_checked
      (Strength.pack_var previous_state.strength)
      ~by:(difficulty_packed, difficulty)
    >>= Strength.unpack_var
  in
  {next_difficulty; strength}
       *)

let step _ = failwith "TODO"

let select s1 s2 =
  if Strength.( > ) s1.strength s2.strength then s1 else s2
